// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//// Enums
enum ConsentKind {
  privacy
  terms
  marketing
}

enum OrderStatus {
  REVIEW
  AWAITING_PAYMENT
  IN_PROGRESS
  DONE
  CANCELED
}

//// Auth.js (PrismaAdapter)
model User {
  id                    String   @id @default(cuid())
  name                  String?
  email                 String?  @unique
  emailVerified         DateTime?
  image                 String?

  phone                 String?
  defaultCity           String?
  organization          String?

  notifyOnStatusChange  Boolean  @default(true)
  notifyOnPayment       Boolean  @default(true)

  accounts              Account[]
  sessions              Session[]
  orders                Order[]
  consents              Consent[]

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//// App models
model Consent {
  id             String      @id @default(cuid())
  userId         String?
  user           User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  kind           ConsentKind
  acceptedAt     DateTime    @default(now())

  policyAt       DateTime?
  orderEmailsAt  DateTime?
  marketingAt    DateTime?

  email          String?
  ip             String?
  userAgent      String?
  docVersion     String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId, kind], name: "user_kind_idx")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  city        String
  description String      @map("details") // колонка details, поле в коде — description
  dueDate     DateTime?
  status      OrderStatus @default(REVIEW)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  events      OrderEvent[]

  @@index([userId, status])
}

model OrderEvent {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  type      String
  message   String?
  createdAt DateTime @default(now())

  @@index([orderId])
}
