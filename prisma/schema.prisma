// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // file:./db.sqlite
}

// ==== Enums ====

enum ConsentKind {
  privacy
  terms
  marketing
}

enum OrderStatus {
  new
  in_progress
  done
  cancelled
}

// ==== Auth.js (PrismaAdapter) ====

model User {
  id               String   @id @default(cuid())
  name             String?
  email            String?  @unique
  emailVerified    DateTime?
  image            String?
  organization     String?
  // расширения профиля
  phone            String?
  defaultCity      String?
  notifyOnStatusChange Boolean @default(true)
  notifyOnPayment       Boolean @default(true)

  // relations
  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  consents  Consent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==== Наши модели ====

model Consent {
  id            String      @id @default(cuid())
  userId        String?
  user          User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  kind          ConsentKind
  acceptedAt    DateTime    @default(now())

  // когда подтверждались конкретные согласия
  policyAt       DateTime?
  orderEmailsAt  DateTime?
  marketingAt    DateTime?

  email        String?
  ip           String?
  userAgent    String?
  docVersion   String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, kind], name: "user_kind_idx")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  city      String
  details   String
  dueDate   DateTime
  status    OrderStatus @default(new)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, status])
}
