generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?   @unique

  // üëá –ù–æ–≤–æ–µ
  defaultCity          String?
  notifyOnStatusChange Boolean @default(true)
  notifyOnPayment      Boolean @default(true)

  organization String? // <- –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è

  accounts Account[]
  sessions Session[]
  posts    Post[]
  orders   Order[]
  events   OrderEvent[]

  emailChangeTokens EmailChangeToken[]

  consents Consent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  REVIEW
  AWAITING_PAYMENT
  IN_PROGRESS
  DONE
  CANCELED
}

model Order {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  city        String
  description String
  budget      Int?
  status      OrderStatus  @default(REVIEW)
  createdAt   DateTime     @default(now())
  dueDate     DateTime?
  events      OrderEvent[]

  @@index([userId, createdAt])
}

model EmailRequest {
  id        String   @id @default(cuid())
  email     String
  ip        String?
  createdAt DateTime @default(now())

  @@index([email, createdAt])
}

// –ò—Å—Ç–æ—Ä–∏—è
enum OrderEventType {
  CREATED
  STATUS_CHANGED
  PAYMENT_METHOD_SELECTED
  NOTE
}

model OrderEvent {
  id        String         @id @default(cuid())
  orderId   String
  order     Order          @relation(fields: [orderId], references: [id])
  userId    String?
  user      User?          @relation(fields: [userId], references: [id])
  type      OrderEventType
  message   String
  createdAt DateTime       @default(now())

  @@index([orderId, createdAt])
}

// Rate limit
model ActionLog {
  id        String   @id @default(cuid())
  key       String
  createdAt DateTime @default(now())

  @@index([key, createdAt])
}

model EmailChangeToken {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  newEmail String
  token    String   @unique
  expires  DateTime

  createdAt DateTime @default(now())

  @@index([userId, expires])
}

enum ConsentKind {
  terms
  privacy
  marketing
}

model Consent {
  id         String      @id @default(cuid())
  userId     String
  email      String?
  kind       ConsentKind
  acceptedAt DateTime    @default(now())
  ip         String?
  userAgent  String?
  docVersion String?
  policyAt   DateTime?
  orderEmailsAt DateTime?
  marketingAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, kind])
}
